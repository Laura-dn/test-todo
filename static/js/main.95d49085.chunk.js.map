{"version":3,"sources":["components/list-item/list-item.js","components/list-item/index.js","components/to-do-list/to-do-list.js","components/to-do-list/index.js","components/statistics/statistics.js","components/statistics/index.js","components/task-form/index.js","components/task-form/task-form.js","components/clear-list/clear-list.js","components/clear-list/index.js","components/search-form/search-form.js","components/search-form/index.js","components/app/index.js","components/app/app.js","index.js"],"names":["ListItem","props","id","task","isDone","isImportant","onClickElement","classes","singImp","className","aria-hidden","role","onClick","aria-label","type","ToDoList","data","map","key","Statistics","all","done","imp","filter","progressBar","width","classColorBar","Math","floor","Number","aria-valuenow","aria-valuemin","aria-valuemax","style","TaskForm","state","input","setState","inputChange","e","target","value","placeholder","onChange","this","Component","ClearList","SearchForm","ev","App","maxId","listData","search","flag","forEach","el","crud","item","generateItem","push","console","log","dbFirstInit","window","indexedDB","open","onupgradeneeded","result","createObjectStore","keyPath","trans","onsuccess","reduce","max","req","accessType","tasks","transaction","objectStore","add","stateInit","getAll","put","delete","clear","length","counter","list","regS","RegExp","test","statistics","getStatistics","searchingArr","ReactDOM","render","document","querySelector"],"mappings":"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","file":"static/js/main.95d49085.chunk.js","sourcesContent":["import React from \"react\";\r\nimport \"./list-item.css\";\r\n\r\nfunction ListItem(props) {\r\n    const { id, task, isDone, isImportant, onClickElement } = props;\r\n    let classes = \"list-group-item d-flex align-items-center justify-content-between\"; //Классы Задачи по умолчанию\r\n    const singImp = <i className=\"fa fa-star\" aria-hidden=\"true\"></i>;\r\n\r\n    //Добавляем класс, если выполнено Задание\r\n    classes += isDone ? \" done\" : \"\";\r\n    //Добавляем класс, если Задание важное\r\n    classes += isImportant ? \" important\" : \"\";\r\n\r\n    //Возвращаем Задание в Список\r\n    return (\r\n        <li className={ classes } role=\"button\">\r\n            <span className=\"container text-left\" onClick={ () => onClickElement(\"DONE\", id) }>\r\n                { isImportant ? singImp : \"\" }\r\n                &nbsp;\r\n                { task }\r\n            </span>\r\n\r\n            <div className=\"btn-group\" role=\"group\" aria-label=\"Basic example\">\r\n                <button\r\n                    type=\"button\"\r\n                    className=\"btn btn-primary\"\r\n                    onClick={ () => onClickElement(\"IMPORTANT\", id) }>\r\n                    \r\n                    <i className=\"fas fa-hand-point-up\" />\r\n                </button>\r\n\r\n                <button\r\n                    type=\"button\"\r\n                    className=\"btn btn-warning\"\r\n                    onClick={ () => onClickElement(\"DEL\", id) }>\r\n                    \r\n                    <i className=\"fas fa-trash-alt\" />\r\n                </button>\r\n            </div>\r\n        </li>\r\n    );\r\n}\r\n\r\nexport default ListItem;\r\n","import ListItem from './list-item.js';\r\n\r\nexport default ListItem;\r\n","import React from \"react\";\r\nimport ListItem from \"../list-item\";\r\n\r\nimport \"./to-do-list.css\";\r\n\r\nfunction ToDoList(props) {\r\n    const { data, onClickElement } = props;\r\n\r\n    return (\r\n        <ul className=\"list-group\">\r\n            {data.map((task) => (\r\n                <ListItem\r\n                    key={ task.id }\r\n                    { ...task }\r\n                    onClickElement={ onClickElement } />\r\n            ))}\r\n        </ul>\r\n    );\r\n}\r\n\r\nexport default ToDoList;\r\n","import ToDoList from './to-do-list.js';\r\n\r\nexport default ToDoList;\r\n","import React from \"react\";\r\nimport \"./statistics.css\";\r\n\r\nfunction Statistics(props) {\r\n    const { all, done, imp, filter, onClickElement } = props;\r\n    let progressBar = {width: \"\"},\r\n        classColorBar = \"progress-bar progress-bar-striped progress-bar-animated\";\r\n\r\n    if(filter === \"ONLYIMPORTANT\") {\r\n        classColorBar += classColorBar + \" bg-primery\";\r\n        progressBar.width = Math.floor((Number(imp) * 100) / Number(all)) + \"%\";\r\n    } else {\r\n        classColorBar += classColorBar + \" bg-success\";\r\n        progressBar.width = Math.floor((Number(done) * 100) / Number(all)) + \"%\";\r\n    }\r\n\r\n    if(progressBar.width === \"NaN%\") {\r\n        progressBar.width = \"\";\r\n    }\r\n\r\n    return (\r\n        <section>\r\n            <p className=\"text-right\">\r\n                <span\r\n                    className={ `badge badge-success ${(filter === \"ONLYDONE\") ? \"btnOn\" : \"\"}`}\r\n                    onClick={ () => onClickElement(\"FILTER\", null, \"ONLYDONE\") }\r\n                    role=\"button\">\r\n\r\n                    DONE: { done }\r\n                </span>\r\n                <span\r\n                    className={`badge badge-primary ml-1 ${(filter === \"ONLYIMPORTANT\") ? \"btnOn\" : \"\"}`}\r\n                    onClick={ () => onClickElement(\"FILTER\", null, \"ONLYIMPORTANT\") }\r\n                    role=\"button\">\r\n                    \r\n                    IMP: { imp }\r\n                </span>\r\n                <span\r\n                    className={`badge badge-dark ml-1 ${(filter === \"ALLTASKS\") ? \"btnOn\" : \"\"}`}\r\n                    onClick={ () => onClickElement(\"FILTER\", null, \"ALLTASKS\") }\r\n                    role=\"button\">\r\n                    \r\n                    ALL: { all }\r\n                </span>\r\n            </p>\r\n\r\n            <div className=\"progress mb-3\">\r\n                <div\r\n                    className={ classColorBar }\r\n                    role=\"progressbar\"\r\n                    aria-valuenow={ done }\r\n                    aria-valuemin=\"0\"\r\n                    aria-valuemax={ all }\r\n                    style={ progressBar }>\r\n                    \r\n                    { progressBar.width }\r\n                </div>\r\n            </div>\r\n        </section>\r\n    );\r\n}\r\n\r\nexport default Statistics;\r\n","import Statistics from './statistics.js';\r\n\r\nexport default Statistics;\r\n","import TaskForm from './task-form.js';\r\n\r\nexport default TaskForm;\r\n","import React, { Component } from \"react\";\r\n\r\nimport \"./task-form.css\";\r\n\r\nexport default class TaskForm extends Component\r\n{\r\n    state = {\r\n        input: \"\"\r\n    }\r\n\r\n    onClickElement = () => {\r\n        this.props.onClickElement(\"ADD\", null, this.state.input);\r\n        this.setState({ input: \"\" });\r\n    }\r\n\r\n    inputChange = (e) => {\r\n        this.setState({ input: e.target.value });\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div className=\"input-group mb-3\">\r\n                <input\r\n                    type=\"text\"\r\n                    className=\"form-control\"\r\n                    placeholder=\"Задача\"\r\n                    onChange={ this.inputChange }\r\n                    value={ this.state.input } />\r\n            \r\n                <div className=\"input-group-append\">\r\n                    <button\r\n                        className=\"btn btn-outline-secondary bg-info text-white\"\r\n                        type=\"button\"\r\n                        onClick={ this.onClickElement }>\r\n                        Добавить\r\n                    </button>\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n","import React from \"react\";\r\n\r\nimport \"./clear-list.css\";\r\n\r\nfunction ClearList(props) {\r\n    const { onClickElement } = props;\r\n\r\n    //Возвращаем кнопку \"Удалить все\"\r\n    return (\r\n        <button \r\n            type=\"button\" \r\n            className=\"btn btn-danger mt-3\" \r\n            onClick={ () => onClickElement(\"DELALL\") }>\r\n            Удалить Список\r\n        </button>\r\n    );\r\n}\r\n\r\nexport default ClearList;\r\n","import ClearList from './clear-list.js';\r\n\r\nexport default ClearList;\r\n","import React from \"react\";\r\nimport \"./search-form.css\";\r\n\r\nfunction SearchForm(props) {\r\n    return(\r\n        <input\r\n            className=\"form-control form-control-sm mb-3\"\r\n            type=\"search\"\r\n            placeholder=\"&#128269;\" \r\n            onChange={ (ev) => props.onClickElement(\"SEARCH\", null, ev) } />\r\n    );\r\n}\r\n\r\nexport default SearchForm;\r\n","import SearchForm from './search-form.js';\r\n\r\nexport default SearchForm;\r\n","import App from './app.js';\r\n\r\nexport default App;\r\n","import React, { Component } from \"react\";\r\nimport ToDoList from \"../to-do-list\";\r\nimport Statistics from \"../statistics\";\r\nimport TaskForm from \"../task-form\";\r\nimport ClearList from \"../clear-list\";\r\nimport SearchForm from \"../search-form\";\r\n\r\nimport \"./app.css\";\r\n\r\nexport default class App extends Component {\r\n    state = {\r\n        maxId: 0,\r\n        listData: [],\r\n        filter: \"ALLTASKS\",\r\n        search: \"\"\r\n    };\r\n\r\n    constructor(props) {\r\n        super(props);\r\n        this.dbFirstInit(); //Инициализируем первый вход в БД\r\n        this.crud(\"read\"); //Вычитываем значения с БД\r\n    }\r\n\r\n    //Первая инициализация БД\r\n    dbFirstInit() {\r\n        const req = window.indexedDB.open(\"listBank\", 1);\r\n\r\n        req.onupgradeneeded = ev => {\r\n            ev.target.result.createObjectStore(\"tasks\", {\r\n                keyPath: \"id\"\r\n            });\r\n        };\r\n    }\r\n\r\n    //Вычитываем БД\r\n    stateInit(trans, data) {\r\n        trans.onsuccess = ev => {\r\n            let listData = ev.target.result,  //Вытягиваем все\r\n                maxId = listData.reduce ((max, { id }) => {return max > id ? max : id;}, 0);\r\n\r\n            this.setState({ listData, maxId });\r\n        };\r\n    }\r\n\r\n    //Контроллер на создание/чтение/обновление/удаление в БД (и удалить все)\r\n    crud(type, data) {\r\n        const req = window.indexedDB.open(\"listBank\", 1);\r\n        const accessType = type === \"read\" ? \"readonly\" : \"readwrite\";\r\n\r\n        req.onsuccess = () => {\r\n            const trans = req.result.transaction(\"tasks\", accessType),\r\n                  tasks = trans.objectStore(\"tasks\");\r\n\r\n            switch (type) {\r\n                case \"create\":\r\n                    tasks.add(data);\r\n                    break;\r\n                case \"read\":\r\n                    this.stateInit(tasks.getAll());\r\n                    break;\r\n                case \"update\":\r\n                    tasks.put(data);\r\n                    break;\r\n                case \"delete\":\r\n                    tasks.delete(data);\r\n                    break;\r\n                case \"DELALL\":\r\n                    tasks.clear();\r\n                    break;\r\n                default:\r\n                    console.log(\"ERROR\");\r\n                    break;\r\n            }\r\n        };\r\n    }\r\n\r\n    //Генератор новой Записи в Списке\r\n    generateItem(task) {\r\n        if(task.length === 0) {\r\n            task = \"New task\";\r\n        }\r\n\r\n        const id = this.state.maxId + 1;\r\n        this.setState({ maxId: id });\r\n\r\n        return {\r\n            id,\r\n            task: task,\r\n            isDone: false,\r\n            isImportant: false\r\n        };\r\n    }\r\n\r\n    //Контроллер на Клик по flag\r\n    onClickElement = (flag, id, data) => {\r\n        let listData = [...this.state.listData];\r\n\r\n        switch (flag) {\r\n            case \"DONE\":\r\n                listData.forEach(el => {\r\n                    if (el.id === id) {\r\n                        el.isDone = !el.isDone;\r\n                        this.crud(\"update\", el);\r\n                    }\r\n                });\r\n                break;\r\n            case \"IMPORTANT\":\r\n                listData.forEach(el => {\r\n                    if (el.id === id) {\r\n                        el.isImportant = !el.isImportant;\r\n                        this.crud(\"update\", el);\r\n                    }\r\n                });\r\n                break;\r\n            case \"ADD\":\r\n                let item = this.generateItem(data);\r\n                listData.push(item);\r\n                this.crud(\"create\", item);\r\n                break;\r\n            case \"DEL\":\r\n                listData = listData.filter(el => el.id !== id);\r\n                this.crud(\"delete\", id);\r\n                break;\r\n            case \"FILTER\":\r\n                this.setState({ filter: data });\r\n                break;\r\n            case \"DELALL\":\r\n                this.crud(flag);\r\n                listData = [];\r\n                break;\r\n            case \"SEARCH\":\r\n                this.setState({ search: data.target.value });\r\n                break;\r\n            default:\r\n                console.log(\"ERROR\");\r\n                break;\r\n        }\r\n\r\n        this.setState({ listData });\r\n    };\r\n\r\n    filter() {\r\n        let listData = [...this.state.listData];\r\n\r\n        switch(this.state.filter) {\r\n            case \"ONLYDONE\":\r\n                return listData.filter(el => el.isDone === true); //Оставляем только выполненные\r\n            case \"ONLYIMPORTANT\":\r\n                return listData.filter(el => el.isImportant === true);  //Оставляем только важные\r\n            case \"ALLTASKS\":\r\n                return listData;\r\n            default:\r\n                console.log(\"ERROR\");\r\n                break;\r\n        }\r\n    }\r\n\r\n    getStatistics() {\r\n        let all = this.state.listData.length;\r\n        let done = this.state.listData.reduce((counter, { isDone }) => (counter += isDone ? 1 : 0), 0);\r\n        let imp = this.state.listData.reduce((counter, { isImportant }) => (counter += isImportant ? 1 : 0), 0);\r\n        \r\n        return {\r\n            all,\r\n            done,\r\n            imp,\r\n            filter: this.state.filter,\r\n            onClickElement: this.onClickElement\r\n        };\r\n    }\r\n\r\n    search(list) {\r\n        if(this.state.search === \"\") {\r\n            return list;\r\n        }\r\n\r\n        let regS = new RegExp(this.state.search, \"i\");\r\n        \r\n        return list.filter(({ task }) => {return regS.test(task);});\r\n    }\r\n\r\n    render() {\r\n        let statistics = this.getStatistics();\r\n        let searchingArr = this.search(this.filter());\r\n\r\n        return (\r\n            <section className=\"app text-center p-3\">\r\n                <SearchForm onClickElement={ this.onClickElement} />\r\n\r\n                <Statistics { ...statistics } />\r\n\r\n                <TaskForm onClickElement={ this.onClickElement } />\r\n\r\n                <ToDoList\r\n                    data={ searchingArr }\r\n                    onClickElement={ this.onClickElement } />\r\n\r\n                <ClearList onClickElement={ this.onClickElement } />\r\n            </section>\r\n        );\r\n    }\r\n}\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './components/app/';\n\nReactDOM.render(<App />, document.querySelector('#root'));\n"],"sourceRoot":""}